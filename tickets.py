# tickets.py
import logging
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
import db
from config import notify_ids, admin_ids, support_ids
import keyboards as kb

logger = logging.getLogger(__name__)
ticket_router = Router()

class TicketStates(StatesGroup):
    entering_text = State()
    answering = State()

class AddMessageStates(StatesGroup):
    typing = State()

# ----------------- –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ -----------------
@ticket_router.message(F.text == "üõ† –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def user_open_support_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.support_submenu)

@ticket_router.message(F.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç")
async def user_start_ticket(message: Message, state: FSMContext):
    await message.answer("üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É (–º–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ/—Ñ–∞–π–ª):")
    await state.set_state(TicketStates.entering_text)

@ticket_router.message(TicketStates.entering_text)
async def user_send_ticket(message: Message, state: FSMContext, bot: Bot):
    text = message.text or message.caption or ""
    file_id, media_type = None, None
    if message.photo:
        file_id = message.photo[-1].file_id
        media_type = "photo"
    elif message.document:
        file_id = message.document.file_id
        media_type = "document"

    ticket_id = await db.create_ticket(message.from_user.id, text, priority=1)
    await db.add_message(ticket_id, message.from_user.id, text, file_id, media_type)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç #%d", message.from_user.id, ticket_id)

    for uid in notify_ids:
        try:
            await bot.send_message(uid, f"‚ö†Ô∏è –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç {message.from_user.id}")
            if file_id:
                if media_type == "photo":
                    await bot.send_photo(uid, file_id, caption=text[:1024])
                else:
                    await bot.send_document(uid, file_id, caption=text[:1024])
        except Exception:
            pass
    await message.answer("‚úÖ –¢–∏–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=kb.main_menu("user"))
    await state.clear()

@ticket_router.message(F.text == "üìã –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã")
async def user_list_tickets(message: Message):
    rows = await db.get_tickets(user_id=message.from_user.id)
    if not rows:
        await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤.", reply_markup=kb.support_submenu)
        return
    for tid, _, text, status, _, created, _ in rows:
        if status == "open":
            await message.answer(
                f"üìã –¢–∏–∫–µ—Ç #{tid} (üî¥ –æ—Ç–∫—Ä—ã—Ç)\n\n{text}\n–°–æ–∑–¥–∞–Ω: {created}",
                reply_markup=kb.user_add_message_button(tid)
            )
        else:
            await message.answer(
                f"üìã –¢–∏–∫–µ—Ç #{tid} (üü¢ –∑–∞–∫—Ä—ã—Ç)\n\n{text}\n–°–æ–∑–¥–∞–Ω: {created}",
                reply_markup=kb.view_full_dialog_button(tid)
            )

@ticket_router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def user_back_to_main(message: Message):
    role = await db.get_user_role(message.from_user.id)
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main_menu(role))

# ----------------- –ê–î–ú–ò–ù / –°–ê–ü–ü–û–†–¢ -----------------
@ticket_router.message(F.text == "üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã")
async def list_open_tickets(message: Message):
    rows = await db.get_tickets(only_open=True)
    if not rows:
        await message.answer("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.", reply_markup=kb.admin_back)
        return
    for tid, uid, text, _, priority, created, last_admin_name in rows:
        note = f"\nüü° –í —Ä–∞–±–æ—Ç–µ ‚Äì {last_admin_name}" if last_admin_name else ""
        prio = "üî¥" if priority == 3 else "üü°" if priority == 2 else "üü¢"
        await message.answer(
            f"{prio} –¢–∏–∫–µ—Ç #{tid} –æ—Ç {uid}{note}\n\n{text}",
            reply_markup=kb.admin_full_actions(tid)
        )

@ticket_router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤")
async def history_tickets(message: Message):
    rows = await db.get_tickets()
    if not rows:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=kb.admin_back)
        return
    for tid, uid, text, status, _, created, last_admin_name in rows:
        emoji = "üü¢" if status == "closed" else "üî¥"
        worked = f"\nüë§ –†–∞–±–æ—Ç–∞–ª: {last_admin_name}" if last_admin_name else ""
        await message.answer(f"{emoji} –¢–∏–∫–µ—Ç #{tid} –æ—Ç {uid}{worked}\n\n{text}")

@ticket_router.message(F.text == "‚ö° –®–∞–±–ª–æ–Ω—ã")
async def show_quick_answers(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ /add_quick <–∏–º—è> <—Ç–µ–∫—Å—Ç>  –∏–ª–∏  /quick <–∏–º—è>")

@ticket_router.message(F.text.startswith("/add_quick "))
async def add_quick(message: Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) != 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /add_quick <–∏–º—è> <—Ç–µ–∫—Å—Ç>")
        return
    name, text = parts[1], parts[2]
    await db.add_quick_answer(name, text)
    await message.answer("‚úÖ –®–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω")

@ticket_router.message(F.text.startswith("/quick "))
async def use_quick(message: Message, state: FSMContext):
    name = message.text.split(maxsplit=1)[1]
    text = await db.get_quick_answer(name)
    if not text:
        await message.answer("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    data = await state.get_data()
    ticket_id = data.get("ticket_id")
    if ticket_id:
        await message.answer(text)
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")

@ticket_router.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ON/OFF")
async def toggle_notifications(message: Message):
    on = await db.toggle_notify(message.from_user.id)
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è " + ("–≤–∫–ª—é—á–µ–Ω—ã" if on else "–≤—ã–∫–ª—é—á–µ–Ω—ã"))

@ticket_router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def admin_back_to_main(message: Message):
    role = await db.get_user_role(message.from_user.id)
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main_menu(role))

# ----------------- CALLBACK –û–ë–†–ê–ë–û–¢–ö–ê -----------------
@ticket_router.callback_query(F.data.startswith("answer_"))
async def admin_answer_prompt(callback: CallbackQuery, state: FSMContext):
    ticket_id = int(callback.data.split("_")[1])
    await state.update_data(ticket_id=ticket_id)
    await callback.message.answer("üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
    await state.set_state(TicketStates.answering)
    await callback.answer()

@ticket_router.message(TicketStates.answering)
async def admin_send_answer(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    ticket_id = data["ticket_id"]
    text = message.text or message.caption or ""
    file_id, media_type = None, None
    if message.photo:
        file_id = message.photo[-1].file_id
        media_type = "photo"
    elif message.document:
        file_id = message.document.file_id
        media_type = "document"
    await db.add_message(ticket_id, message.from_user.id, text, file_id, media_type)
    logger.info("–ê–¥–º–∏–Ω %d –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–∏–∫–µ—Ç–µ #%d", message.from_user.id, ticket_id)

    info = await db.get_ticket_info(ticket_id)
    user_id = info[1]
    try:
        await bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:")
        if file_id:
            if media_type == "photo":
                await bot.send_photo(user_id, file_id, caption=text[:1024])
            else:
                await bot.send_document(user_id, file_id, caption=text[:1024])
        else:
            await bot.send_message(user_id, text)
    except Exception:
        pass
    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await state.clear()

@ticket_router.callback_query(F.data.startswith("close_"))
async def close_ticket_callback(callback: CallbackQuery, bot: Bot):
    ticket_id = int(callback.data.split("_")[1])
    await db.close_ticket(ticket_id, callback.from_user.id)
    info = await db.get_ticket_info(ticket_id)
    user_id = info[1]
    closer_name = info[6] or str(callback.from_user.id)
    try:
        await bot.send_message(user_id, f"üîí –í–∞—à —Ç–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
    except Exception:
        pass
    logger.info("–¢–∏–∫–µ—Ç #%d –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–æ–º %d", ticket_id, callback.from_user.id)
    await callback.message.edit_text(f"üîí –¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {closer_name}.", reply_markup=None)
    await callback.answer()

# --- –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ---
@ticket_router.callback_query(F.data.startswith("addmsg_"))
async def user_add_msg_prompt(callback: CallbackQuery, state: FSMContext):
    ticket_id = int(callback.data.split("_")[1])
    await state.update_data(ticket_id=ticket_id)
    await callback.message.answer("üñäÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª:")
    await state.set_state(AddMessageStates.typing)
    await callback.answer()

@ticket_router.message(AddMessageStates.typing)
async def user_send_more(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    ticket_id = data["ticket_id"]
    text = message.text or message.caption or ""
    file_id, media_type = None, None
    if message.photo:
        file_id = message.photo[-1].file_id
        media_type = "photo"
    elif message.document:
        file_id = message.document.file_id
        media_type = "document"
    await db.add_message(ticket_id, message.from_user.id, text, file_id, media_type)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –¥–æ–±–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ #%d", message.from_user.id, ticket_id)
    for uid in notify_ids:
        try:
            await bot.send_message(uid, f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç #{ticket_id}")
        except Exception:
            pass
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.", reply_markup=kb.user_add_message_button(ticket_id))
    await state.clear()

# --- –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–π —Ç–∏–∫–µ—Ç ---
@ticket_router.callback_query(F.data.startswith("userclose_"))
async def user_close_own(callback: CallbackQuery, bot: Bot):
    ticket_id = int(callback.data.split("_")[1])
    info = await db.get_ticket_info(ticket_id)
    if not info or info[3] != "open":
        await callback.answer("–¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
        return
    await db.close_ticket(ticket_id, callback.from_user.id)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç #%d", callback.from_user.id, ticket_id)
    await callback.message.edit_text("üîí –í—ã –∑–∞–∫—Ä—ã–ª–∏ —Ç–∏–∫–µ—Ç.", reply_markup=None)
    await callback.answer()

# --- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–∞ ---
@ticket_router.callback_query(F.data.startswith("fulldialog_"))
async def show_full_dialog(callback: CallbackQuery, bot: Bot):
    ticket_id = int(callback.data.split("_", 1)[1])
    messages = await db.get_ticket_messages(ticket_id)
    if not messages:
        await callback.answer("–î–∏–∞–ª–æ–≥ –ø—É—Å—Ç.", show_alert=True)
        return
    for sender_id, text, file_id, media_type, sent_at in messages:
        prefix = "üë§ –í—ã:" if sender_id == callback.from_user.id else "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:"
        if media_type == "photo":
            await bot.send_photo(callback.from_user.id, file_id, caption=f"{prefix} {text or ''}")
        elif media_type == "document":
            await bot.send_document(callback.from_user.id, file_id, caption=f"{prefix} {text or ''}")
        else:
            await bot.send_message(callback.from_user.id, f"{prefix} {text}")
    await callback.answer()