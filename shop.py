from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import db
from payments.payment_states import PaymentStates
from marzban_api import create_paid_user, extend_user, get_user_subscription_link

shop_router = Router(name="shop")

# ====== FSM –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞ ======
class KeyStates(StatesGroup):
    waiting_key = State()

def _methods_kb(flags: dict[str,bool]) -> InlineKeyboardMarkup:
    rows = []
    if flags.get("PAYPALYCH_ENABLED"):
        rows.append([InlineKeyboardButton(text="PayPalych", callback_data="pm_pally")])
    if flags.get("YOOKASSA_ENABLED"):
        rows.append([InlineKeyboardButton(text="YooKassa", callback_data="pm_yookassa")])
    if flags.get("YOOMONEY_ENABLED"):
        rows.append([InlineKeyboardButton(text="–ÆMoney", callback_data="pm_yoomoney")])
    if flags.get("STARS_ENABLED"):
        rows.append([InlineKeyboardButton(text="Telegram Stars", callback_data="pm_stars")])
    if not rows:
        rows.append([InlineKeyboardButton(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã", callback_data="no_methods")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _periods_kb(periods, prefix: str) -> InlineKeyboardMarkup:
    rows = []
    for pid, months, price in periods:
        rows.append([InlineKeyboardButton(text=f"{months} –º–µ—Å ¬∑ {price:.2f} ‚ÇΩ", callback_data=f"{prefix}{pid}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def build_description(ptype: str, months: int, username: str | None = None) -> tuple[str,str]:
    if ptype == "new":
        name = f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî {months} –º–µ—Å."
        desc = ("–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π VPN –¥–æ—Å—Ç—É–ø –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫. "
                "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7. "
                "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ —Å—Å—ã–ª–∫–µ –≤ –±–æ—Ç–µ.")
    elif ptype == "renew":
        name = f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN ‚Äî {months} –º–µ—Å."
        desc = (f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ {username} –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤. "
                "–î–µ–π—Å—Ç–≤—É–µ—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã, –æ—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è.")
    elif ptype == "key":
        name = f"VPN –∫–ª—é—á ‚Äî {months} –º–µ—Å."
        desc = ("–ê–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è VPN –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫. "
                "–ú–æ–∂–Ω–æ –ø–æ–¥–∞—Ä–∏—Ç—å: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –¥—Ä—É–≥—É, –æ–Ω –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –µ–≥–æ –≤ –±–æ—Ç–µ.")
    else:
        name = "–û–ø–ª–∞—Ç–∞ VPN"
        desc = "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ VPN."
    return name, desc

# ========= –ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ =========
@shop_router.message(F.text.in_({"üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "/buy"}))
async def buy_entry(message: Message, state: FSMContext):
    periods = await db.get_periods()
    if not periods:
        await message.answer("–ü–µ—Ä–∏–æ–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    await state.update_data(ptype="new")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=_periods_kb(periods, prefix="period_"))

@shop_router.callback_query(F.data.startswith("period_"))
async def period_chosen(callback: CallbackQuery, state: FSMContext):
    period_id = int(callback.data.split("_", 1)[1])
    row = await db.get_subscription_period_by_id(period_id)
    if not row:
        await callback.answer("–ü–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
    _, months, price = row
    await state.update_data(period_id=period_id, months=months, amount=price)
    # —Å–æ–±—Ä–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
    name, desc = build_description("new", months)
    await state.update_data(product_name=name, product_desc=desc)
    from config import PAYPALYCH_ENABLED, YOOKASSA_ENABLED, YOOMONEY_ENABLED, STARS_ENABLED
    flags = {
        "PAYPALYCH_ENABLED": bool(PAYPALYCH_ENABLED),
        "YOOKASSA_ENABLED": bool(YOOKASSA_ENABLED),
        "YOOMONEY_ENABLED": bool(YOOMONEY_ENABLED),
        "STARS_ENABLED": bool(STARS_ENABLED),
    }
    await callback.message.answer(
        f"<b>{name}</b>\n{desc}\n\n–ö –æ–ø–ª–∞—Ç–µ: {price:.2f} ‚ÇΩ\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=_methods_kb(flags)
    )
    await state.set_state(PaymentStates.choosing_method)
    await callback.answer()

# ========= –ü—Ä–æ–¥–ª–µ–Ω–∏–µ =========
@shop_router.message(F.text.in_({"üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "/renew"}))
async def renew_entry(message: Message, state: FSMContext):
    subs = await db.get_user_subscriptions(message.from_user.id)
    if not subs:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è."); return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"renew_pick_{name}")] for name in subs
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=kb)

@shop_router.callback_query(F.data.startswith("renew_pick_"))
async def renew_pick(callback: CallbackQuery, state: FSMContext):
    username = callback.data.replace("renew_pick_","",1)
    periods = await db.get_periods()
    if not periods:
        await callback.message.answer("–ü–µ—Ä–∏–æ–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."); await callback.answer(); return
    await state.update_data(ptype="renew", renew_username=username)
    await callback.message.answer(f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ <b>{username}</b>. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=_periods_kb(periods, prefix="renew_period_"))
    await callback.answer()

@shop_router.callback_query(F.data.startswith("renew_period_"))
async def renew_period(callback: CallbackQuery, state: FSMContext):
    period_id = int(callback.data.split("_", 2)[2])
    row = await db.get_period_by_id(period_id)
    if not row:
        await callback.answer("–ü–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
    _, months, price = row
    await state.update_data(period_id=period_id, months=months, amount=price)
    username = (await state.get_data()).get("renew_username")
    name, desc = build_description("renew", months, username)
    await state.update_data(product_name=name, product_desc=desc)
    from config import PAYPALYCH_ENABLED, YOOKASSA_ENABLED, YOOMONEY_ENABLED, STARS_ENABLED
    flags = {
        "PAYPALYCH_ENABLED": bool(PAYPALYCH_ENABLED),
        "YOOKASSA_ENABLED": bool(YOOKASSA_ENABLED),
        "YOOMONEY_ENABLED": bool(YOOMONEY_ENABLED),
        "STARS_ENABLED": bool(STARS_ENABLED),
    }
    await callback.message.answer(
        f"<b>{name}</b>\n{desc}\n\n–ö –æ–ø–ª–∞—Ç–µ: {price:.2f} ‚ÇΩ\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=_methods_kb(flags)
    )
    await state.set_state(PaymentStates.choosing_method)
    await callback.answer()

# ========= –ö—É–ø–∏—Ç—å –∫–ª—é—á =========
@shop_router.message(F.text.in_({"üîë –ö—É–ø–∏—Ç—å –∫–ª—é—á", "/buy_key"}))
async def buy_key_entry(message: Message, state: FSMContext):
    periods = await db.get_periods()
    if not periods:
        await message.answer("–ü–µ—Ä–∏–æ–¥—ã –∫–ª—é—á–µ–π –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."); return
    await state.update_data(ptype="key")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞:", reply_markup=_periods_kb(periods, prefix="key_period_"))

@shop_router.callback_query(F.data.startswith("key_period_"))
async def key_period(callback: CallbackQuery, state: FSMContext):
    period_id = int(callback.data.split("_", 2)[2])
    row = await db.get_period_by_id(period_id)
    if not row:
        await callback.answer("–ü–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
    _, months, price = row
    await state.update_data(period_id=period_id, months=months, amount=price)
    name, desc = build_description("key", months)
    await state.update_data(product_name=name, product_desc=desc)
    from config import PAYPALYCH_ENABLED, YOOKASSA_ENABLED, YOOMONEY_ENABLED, STARS_ENABLED
    flags = {
        "PAYPALYCH_ENABLED": bool(PAYPALYCH_ENABLED),
        "YOOKASSA_ENABLED": bool(YOOKASSA_ENABLED),
        "YOOMONEY_ENABLED": bool(YOOMONEY_ENABLED),
        "STARS_ENABLED": bool(STARS_ENABLED),
    }
    await callback.message.answer(
        f"<b>{name}</b>\n{desc}\n\n–ö –æ–ø–ª–∞—Ç–µ: {price:.2f} ‚ÇΩ\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=_methods_kb(flags)
    )
    await state.set_state(PaymentStates.choosing_method)
    await callback.answer()

# ====== –í–≤–µ—Å—Ç–∏ –∫–ª—é—á ======
@shop_router.message(F.text.in_({"üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á", "/enter_key"}))
async def enter_key_start(message: Message, state: FSMContext):
    await message.answer("üîë –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤).")
    await state.set_state(KeyStates.waiting_key)

@shop_router.message(KeyStates.waiting_key, F.text)
async def process_key(message: Message, state: FSMContext):
    code = (message.text or "").strip().upper()
    row = await db.get_key(code)
    if not row:
        await message.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
    _code, months, uses_left, *_ = row
    if uses_left <= 0:
        await message.answer("‚ùå –ö–ª—é—á —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω."); return
    months_to_add = await db.consume_key(code, message.from_user.id)
    if not months_to_add:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."); return
    subs = await db.get_user_subscriptions(message.from_user.id)
    if subs:
        username = subs[0]
        ok = await extend_user(username, months_to_add)
        link = await get_user_subscription_link(username) or ""
        txt = f"‚úÖ –ö–ª—é—á –ø—Ä–∏–º–µ–Ω—ë–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ <b>{username}</b> –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {months_to_add} –º–µ—Å."
        if link: txt += f"\nüîó –°—Å—ã–ª–∫–∞: {link}"
        await message.answer(txt)
    else:
        username = f"key_{message.from_user.id}_{code}"
        ok = await create_paid_user(username, months_to_add)
        if not ok:
            await message.answer("‚ö† –ö–ª—é—á —Å–ø–∏—Å–∞–Ω, –Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ —É–¥–∞–ª–æ—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."); await state.clear(); return
        await db.set_local_name(message.from_user.id, username, username)
        link = await get_user_subscription_link(username) or ""
        txt = f"‚úÖ –ö–ª—é—á –ø—Ä–∏–º–µ–Ω—ë–Ω. –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ <b>{username}</b> –Ω–∞ {months_to_add} –º–µ—Å."
        if link: txt += f"\nüîó –°—Å—ã–ª–∫–∞: {link}"
        await message.answer(txt)
    await state.clear()

@shop_router.callback_query(F.data == "no_methods")
async def no_methods(callback: CallbackQuery):
    await callback.answer("–ù–µ—Ç –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
