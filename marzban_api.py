import aiohttp
import asyncio
import time
import logging
from datetime import datetime, timedelta
from config import MARZBAN_URL, MARZBAN_USERNAME, MARZBAN_PASSWORD

# –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –∏ –≤—Ä–µ–º—è –µ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
_token: str | None = None
_token_expire: datetime | None = None

def _now_utc() -> datetime:
    return datetime.utcnow()

async def refresh_token() -> bool:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É Marzban."""
    global _token, _token_expire
    try:
        base = MARZBAN_URL.rstrip("/")
        async with aiohttp.ClientSession() as session:
            # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º data= (application/x-www-form-urlencoded), –ù–ï json=
            async with session.post(
                f"{base}/api/admin/token",
                data={
                    "username": MARZBAN_USERNAME,
                    "password": MARZBAN_PASSWORD,
                    # "grant_type": "password",  # –æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å
                },
                timeout=aiohttp.ClientTimeout(total=15),
            ) as resp:
                text = await resp.text()
                if resp.status == 200:
                    data = await resp.json()
                    _token = data.get("access_token")
                    # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª expires_in (—Å–µ–∫—É–Ω–¥—ã) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ; –∏–Ω–∞—á–µ —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    expires_in = data.get("expires_in", 3600)
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º (–º–∏–Ω—É—Å 5 –º–∏–Ω—É—Ç), —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ—Ç—É—Ö –≤–ø—Ä–∏—Ç—ã–∫
                    _token_expire = _now_utc() + timedelta(seconds=max(60, expires_in - 300))
                    logging.info("üîê –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω Marzban")
                    return True
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {resp.status} {text}")
    except Exception as e:  # pragma: no cover - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
    return False

async def get_headers() -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º."""
    global _token, _token_expire
    # –û–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω –∑–∞—Ä–∞–Ω–µ–µ, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å <5 –º–∏–Ω—É—Ç
    need_refresh = (
        not _token
        or not _token_expire
        or _now_utc() >= _token_expire
        or (_token_expire - _now_utc()) <= timedelta(minutes=5)
    )
    if need_refresh:
        ok = await refresh_token()
        if not ok:
            return {}
    return {"Authorization": f"Bearer {_token}"}

async def token_refresher():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω ‚Äî —Å–ø–∏—Ç –¥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –ø–æ—Ä–∞ –æ–±–Ω–æ–≤–∏—Ç—å."""
    while True:
        # –°–ø–∏–º –¥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        if _token_expire:
            sleep_for = max(30, (_token_expire - _now_utc() - timedelta(minutes=5)).total_seconds())
        else:
            sleep_for = 60
        await asyncio.sleep(sleep_for)
        await refresh_token()

async def check_connection() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Marzban API"""
    try:
        base = MARZBAN_URL.rstrip("/")
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{base}/api/admin",
                headers=await get_headers(),
                timeout=aiohttp.ClientTimeout(total=15),
            ) as resp:
                text = await resp.text()
                if resp.status == 200:
                    data = await resp.json()
                    logging.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Marzban API. –í–µ—Ä—Å–∏—è: {data.get('version')}")
                    return True
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {resp.status} {text}")
                return False
    except Exception as e:  # pragma: no cover - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Marzban API: {e}")
        return False

async def api_request(method: str, endpoint: str, payload: dict | None = None):
    """–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API (JSON-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)."""
    base = MARZBAN_URL.rstrip("/")
    url = f"{base}/api{endpoint}"
    async with aiohttp.ClientSession() as session:
        async with session.request(
            method,
            url,
            headers=await get_headers(),
            json=payload,
            timeout=aiohttp.ClientTimeout(total=30),
        ) as resp:
            text = await resp.text()
            if resp.status in (200, 201):
                # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç ‚Äî —Ç–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º —Ç–µ–∫—Å—Ç
                try:
                    return await resp.json()
                except Exception:
                    return text
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ API [{method} {endpoint}]: {resp.status} {text}")
            return None

async def create_trial_user(nickname: str, sub_number: int):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ trial-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 14 –¥–Ω–µ–π –≤ on_hold
    """
    username = f"{nickname}"
    payload = {
        "username": username,
        "status": "on_hold",
        "expire": 0,  # expire –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è trial
        "data_limit": 0,
        "data_limit_reset_strategy": "no_reset",
        "proxies": {
            "vless": {}
        },
        "inbounds": {
            "vless": ["Steal", "XTLS"]
        },
        "note": f"Trial –ø–æ–¥–ø–∏—Å–∫–∞ 14 –¥–Ω–µ–π –¥–ª—è {nickname}",
        "on_hold_expire_duration": 14 * 24 * 60 * 60,  # 14 –¥–Ω–µ–π
        "on_hold_timeout": 3 * 24 * 60 * 60
    }
    return await api_request("POST", "/user", payload)

async def create_paid_user(nickname: str, payment_id: int, months: int):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π (on_hold).
    –í–ê–ñ–ù–û:
    - –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å 'expire' –≤–º–µ—Å—Ç–µ —Å status='on_hold'
    - 'on_hold_expire_duration' = —Å—Ä–æ–∫ –±—É–¥—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    - 'on_hold_timeout' (—Å–µ–∫) ‚Äî —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ö–æ–ª–¥–µ –¥–æ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è/–æ—á–∏—Å—Ç–∫–∏
    """
    now = int(time.time())
    username = f"paid_{nickname}_{payment_id}"

    # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–¥—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    duration_sec = now + months * 30 * 24 * 60 * 60  # ¬´–º–µ—Å—è—Ü¬ª = 30 –¥–Ω–µ–π, –∫–∞–∫ —É —Ç–µ–±—è

    payload = {
        "username": username,
        "status": "active",
        "expire": duration_sec,
        "data_limit": 0,
        "data_limit_reset_strategy": "no_reset",
        "proxies": {
            "vless": {}
        },
        "inbounds": {
            "vless": ["Steal", "XTLS"]
        },
        "note": f"Paid –ø–æ–¥–ø–∏—Å–∫–∞ {months} –º–µ—Å. –¥–ª—è {nickname}",
        # —ç—Ç–æ –ù–ï ¬´–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ–ª–¥–∞¬ª, –∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–¥—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        #"on_hold_expire_duration": int(duration_sec),
        # –∞ —ç—Ç–æ ‚Äî —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –≤–∏—Å–µ—Ç—å –≤ —Ö–æ–ª–¥–µ –¥–æ –æ—á–∏—Å—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –¥–Ω—è)
        #"on_hold_timeout": 3 * 24 * 60 * 60
    }

    return await api_request("POST", "/user", payload)

async def extend_user(username: str, months: int):
    """
    –ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –î–æ–±–∞–≤–ª—è–µ–º N –º–µ—Å—è—Ü–µ–≤ –∫ —Ç–µ–∫—É—â–µ–º—É expire.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await api_request("GET", f"/user/{username}")
    if not user_data:
        return None

    current_expire = user_data.get("expire", 0)
    now_ts = int(time.time())

    # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –±–µ—Å—Å—Ä–æ—á–Ω–∞—è –∏–ª–∏ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    base_time = current_expire if current_expire > now_ts else now_ts

    # –¥–æ–±–∞–≤–ª—è–µ–º N –º–µ—Å—è—Ü–µ–≤ (30 –¥–Ω–µ–π * N)
    new_expire = base_time + months * 30 * 24 * 60 * 60

    payload = {
        "expire": new_expire
    }

    return await api_request("PUT", f"/user/{username}", payload)

async def get_user_subscription_link(username: str):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (subscription link) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    data = await api_request("GET", f"/user/{username}")
    if data and "subscription_url" in data:
        return data["subscription_url"]
    return None

async def get_user_subscriptions(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ —é–∑–µ—Ä–∞ (trial + paid)."""
    # —Ç—É—Ç —É —Ç–µ–±—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ö–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username = f"trial_{user_id}" / f"paid_{user_id}_N"
    data = []
    async with aiohttp.ClientSession() as session:
        async with session.get(
                f"{MARZBAN_URL}/api/users", headers=await get_headers()
        ) as resp:
            if resp.status == 200:
                all_users = await resp.json()
                for user in all_users:
                    if str(user_id) in user["username"]:
                        data.append(user)
    return data
