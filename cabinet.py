# cabinet.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import db
from marzban_api import get_user_subscription_link
from config import YOOKASSA_ENABLED

cabinet_router = Router(name="cabinet")

# ---------- FSM ----------
class RenameStates(StatesGroup):
    waiting_new_name = State()
    # –¥–µ—Ä–∂–∏–º –≤ state: username

class RenewStates(StatesGroup):
    choosing_period = State()
    # –¥–µ—Ä–∂–∏–º –≤ state: username
    # –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–ª–æ–∂–∏–º: amount, months, ptype="renew", renew_username=username
    # —ç—Ç–æ –∑–∞–±–µ—Ä—ë—Ç payments/yookassa.py (pm_yookassa)

# ---------- –ö–ù–û–ü–ö–ò/–ö–õ–ê–í–´ ----------
def _sub_row_kb(username: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó –°—Å—ã–ª–∫–∞", callback_data=f"cab_link:{username}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"cab_ren:{username}")],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"cab_renew:{username}")],
        ]
    )

def _periods_kb(periods) -> InlineKeyboardMarkup:
    # periods: list[(id, months, price)]
    rows = []
    for pid, months, price in periods:
        rows.append([InlineKeyboardButton(text=f"{months} –º–µ—Å ‚Äî {price:.2f} ‚ÇΩ", callback_data=f"cab_rp:{pid}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cab_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _payments_kb() -> InlineKeyboardMarkup:
    rows = []
    if YOOKASSA_ENABLED:
        rows.append([InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ÆKassa", callback_data="pm_yookassa")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cab_cancel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ---------- –û–¢–ö–†–´–¢–ò–ï –ö–ê–ë–ò–ù–ï–¢–ê ----------
async def _send_cabinet(message: Message):
    subs = await db.get_user_subscriptions(message.from_user.id)
    if not subs:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üõç –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª."
        )
        return
    # subs: list[(username, local_name | None)]
    for username, local_name in subs:
        name = local_name or username
        await message.answer(
            f"üì° <b>{name}</b>\n<code>{username}</code>",
            reply_markup=_sub_row_kb(username)
        )

@cabinet_router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def open_cabinet_btn(message: Message):
    await _send_cabinet(message)

@cabinet_router.callback_query(F.data == "cab_back")
async def cab_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    await _send_cabinet(callback.message)

# ---------- –°–°–´–õ–ö–ê ----------
@cabinet_router.callback_query(F.data.startswith("cab_link:"))
async def cab_link(callback: CallbackQuery):
    username = callback.data.split(":", 1)[1]
    link = await get_user_subscription_link(username)
    if not link:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.", show_alert=True)
        return
    await callback.message.answer(
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è <b>{username}</b>:\n{link}"
    )
    await callback.answer()

# ---------- –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï ----------
@cabinet_router.callback_query(F.data.startswith("cab_ren:"))
async def cab_rename(callback: CallbackQuery, state: FSMContext):
    username = callback.data.split(":", 1)[1]
    await state.update_data(username=username)
    await state.set_state(RenameStates.waiting_new_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:")
    await callback.answer()

@cabinet_router.message(RenameStates.waiting_new_name)
async def cab_set_new_name(message: Message, state: FSMContext):
    data = await state.get_data()
    username = data.get("username")
    new_name = (message.text or "").strip()
    if not new_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        return
    await db.set_local_name(message.from_user.id, username, new_name)
    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è <code>{username}</code> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ <b>{new_name}</b>.")
    await state.clear()

# ---------- –ü–†–û–î–õ–ï–ù–ò–ï ----------
@cabinet_router.callback_query(F.data.startswith("cab_renew:"))
async def renew_start(callback: CallbackQuery, state: FSMContext):
    username = callback.data.split(":", 1)[1]
    await state.update_data(username=username)
    periods = await db.get_subscription_periods()
    if not periods:
        await callback.answer("–¢–∞—Ä–∏—Ñ—ã (–ø–µ—Ä–∏–æ–¥—ã) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.", show_alert=True)
        return
    await state.set_state(RenewStates.choosing_period)
    await callback.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–ª—è <b>{username}</b>:",
        reply_markup=_periods_kb(periods)
    )
    await callback.answer()

@cabinet_router.callback_query(RenewStates.choosing_period, F.data.startswith("cab_rp:"))
async def renew_pick_period(callback: CallbackQuery, state: FSMContext):
    try:
        period_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", show_alert=True)
        return

    row = await db.get_subscription_period_by_id(period_id)
    if not row:
        await callback.answer("–ü–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    pid, months, price = row
    data = await state.get_data()
    username = data.get("username")

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–æ–¥—É–ª—è (pm_yookassa)
    await state.update_data(
        amount=float(price),
        months=int(months),
        ptype="renew",
        renew_username=username,
        product_name=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN ‚Äî {months} –º–µ—Å.",
        product_desc=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ <{username}> –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤.",
    )

    await callback.message.answer(
        f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ <b>{username}</b> –Ω–∞ <b>{months}</b> –º–µ—Å.\n"
        f"–ö –æ–ø–ª–∞—Ç–µ: <b>{price:.2f} ‚ÇΩ</b>",
        reply_markup=_payments_kb()
    )
    await callback.answer()
