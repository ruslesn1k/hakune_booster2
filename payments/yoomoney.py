# payments/yoomoney.py
import aiosqlite
from config import DB_FILE
import json
import aiohttp
import asyncio
import datetime
import urllib.parse
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
import json as _json

import db
from config import (
    YOOMONEY_ENABLED,
    YOOMONEY_WALLET_ID,
    YOOMONEY_ACCESS_TOKEN,
    YOOMONEY_RETURN_URL,
)
from marzban_api import create_paid_user, extend_user, get_user_subscription_link

# –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–ª–∞—Ç—ë–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
yoomoney_router = Router(name="yoomoney") if YOOMONEY_ENABLED else None

API_HOST = "https://yoomoney.ru"
API_OP_HISTORY = f"{API_HOST}/api/operation-history"

def _fmt_amount(amount: float) -> str:
    # –ÆMoney –∂–¥—ë—Ç —Ç–æ—á–∫—É –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    return f"{amount:.2f}"

def build_quickpay_url(
    receiver: str,
    amount: float,
    label: str,
    name: str,
    desc: str,
    success_url: str,
    payment_type: str | None = None,  # "AC" (–∫–∞—Ä—Ç–∞) | "PC" (–ÆMoney) | None (–≤—ã–±–æ—Ä –Ω–∞ —Ñ–æ—Ä–º–µ)
) -> str:
    """
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Quickpay:
    https://yoomoney.ru/docs/payment-buttons/using-api/forms
    """
    params = {
        "receiver": receiver,
        "quickpay-form": "shop",        # shop|donate ‚Äî –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –ª—É—á—à–µ shop
        "sum": _fmt_amount(amount),
        "label": label,                 # –Ω–∞—à–∞ –º–µ—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ API
        "targets": name[:128],          # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–ª–∞—Ç–µ–∂–∞
        "comment": desc[:512],          # –æ–ø–∏—Å–∞–Ω–∏–µ
        "successURL": success_url,
    }
    if payment_type:
        params["paymentType"] = payment_type
    qs = urllib.parse.urlencode(params, safe=":/")
    return f"{API_HOST}/quickpay/confirm.xml?{qs}"


async def _yoomoney_find_paid(label: str, min_amount: float) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –º–µ—Ç–∫–µ label –Ω–∞–ª–∏—á–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ —Å—É–º–º—É >= min_amount.
    https://yoomoney.ru/docs/wallet/user-account/operations-history
    """
    headers = {"Authorization": f"Bearer {YOOMONEY_ACCESS_TOKEN}"}
    params = {"label": label, "records": 30}
    async with aiohttp.ClientSession() as sess:
        async with sess.get(API_OP_HISTORY, headers=headers, params=params) as resp:
            if resp.status != 200:
                text = await resp.text()
                # –ú–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å text
                return False
            data = await resp.json()
    # –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ operations
    # operation example keys: operation_id, status ('success'), amount, label, datetime, ...
    for op in data.get("operations", []):
        if op.get("status") == "success" and op.get("label") == label:
            try:
                amt = float(op.get("amount", 0))
            except Exception:
                amt = 0.0
            if amt + 1e-6 >= float(min_amount):
                return True
    return False


async def _on_payment_approved(message: Message, payment_id: int):
    """
    –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:
    - new   -> —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    - renew -> –ø—Ä–æ–¥–ª–∏—Ç—å username
    - key   -> —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    """
    row = await db.get_payment_by_id(payment_id)
    if not row:
        await message.answer("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    _pid, user_id, amount, status, purpose, extra_json, created_at = row
    extra = {}
    try:
        extra = json.loads(extra_json or "{}")
    except Exception:
        pass

    months = int(extra.get("months", 1))
    username = extra.get("username")
    ptype = purpose or extra.get("ptype") or "new"

    if ptype == "renew":
        if not username:
            await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω username –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            return
        ok = await extend_user(username, months)
        link = await get_user_subscription_link(username) or ""
        txt = f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ü–æ–¥–ø–∏—Å–∫–∞ <b>{username}</b> –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {months} –º–µ—Å."
        if link:
            txt += f"\nüîó –°—Å—ã–ª–∫–∞: {link}"
        await message.answer(txt)
        return

    if ptype == "key":
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –Ω–∞ months –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        code = await db.generate_key(months=months, uses_left=1)
        await message.answer(
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –í–∞—à –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:\n"
            f"üîë <code>{code}</code>\n\n"
            "–í –±–æ—Ç–µ –Ω–∞–∂–º–∏—Ç–µ ¬´üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥."
        )
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    new_username = f"paid_{user_id}_{payment_id}"
    ok = await create_paid_user(new_username, months)
    if not ok:
        await message.answer("‚ö† –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ —É–¥–∞–ª–æ—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    # –ó–∞–ø–∏—à–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    if hasattr(db, "upsert_subscription"):
        await db.upsert_subscription(user_id, new_username, local_name=new_username)
    link = await get_user_subscription_link(new_username) or ""
    txt = (
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n"
        f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ <b>{new_username}</b> —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ {months} –º–µ—Å.\n"
    )
    if link:
        txt += f"\nüîó –°—Å—ã–ª–∫–∞: {link}"
    await message.answer(txt)


if yoomoney_router:

    @yoomoney_router.callback_query(F.data == "pm_yoomoney")
    async def choose_yoomoney(callback: CallbackQuery, state: FSMContext):
        """
        –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂, –≤—ã–¥–∞—ë–º —Å—Å—ã–ª–∫—É QuickPay –∏ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.
        –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (ptype, months, username –∏ —Ç.–ø.) —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ payments.extra
        """
        data = await state.get_data()
        amount = float(data.get("amount", 0))
        months = int(data.get("months", 1))
        ptype = data.get("ptype", "new")            # new|renew|key
        username = data.get("renew_username")       # —Ç–æ–ª—å–∫–æ –¥–ª—è renew
        name = data.get("product_name", "–û–ø–ª–∞—Ç–∞ VPN")
        desc = data.get("product_desc", "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ VPN")

        if not YOOMONEY_WALLET_ID or not YOOMONEY_ACCESS_TOKEN:
            await callback.message.answer("–ÆMoney –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            await callback.answer()
            return

        # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ –≤ —Å–≤–æ–µ–π –ë–î (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º–∏ add_payment)
        extra = {
            "ptype": ptype,
            "months": months,
            "username": username,
            "product_name": name,
            "product_desc": desc,
        }
        extra_json = _json.dumps(extra, ensure_ascii=False)

        try:
            # –≤–∞—Ä–∏–∞–Ω—Ç, –≥–¥–µ add_payment –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ª–µ photo_id
            payment_id = await db.add_payment(
                user_id=callback.from_user.id,
                amount=amount,
                purpose=ptype,
                photo_id=None,  # –¥–ª—è –∞–≤—Ç–æ-–ø–ª–∞—Ç–µ–∂–µ–π —Ñ–æ—Ç–æ –Ω–µ—Ç
                extra=extra_json,  # <-- –ü–ï–†–ï–î–ê–Å–ú –°–¢–†–û–ö–£, –ù–ï dict
            )
        except TypeError:
            try:
                # —Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: (user_id, amount, purpose, photo_id, extra)
                payment_id = await db.add_payment(
                    callback.from_user.id,
                    amount,
                    ptype,
                    None,  # photo_id
                    extra_json,  # <-- —Ç–æ–∂–µ —Å—Ç—Ä–æ–∫–∞ JSON
                )
            except Exception as e:
                await callback.message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
                await callback.answer()
                return

        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–µ—Ç–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –≤ payments.extra (–¥–æ–±–∞–≤–∏–º –∫ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É JSON)
        label = f"YM-{payment_id}-{callback.from_user.id}"

        # –µ—Å–ª–∏ –µ—Å—Ç—å —É—Ç–∏–ª–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è extra ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if hasattr(db, "update_payment_extra"):
            try:
                await db.update_payment_extra(payment_id, {"label": label, **extra})
            except Exception:
                # –ø—Ä—è–º–æ–π –∞–ø–¥–µ–π—Ç
                async with aiosqlite.connect(DB_FILE) as _db:
                    merged = {**extra, "label": label}
                    await _db.execute(
                        "UPDATE payments SET extra = ? WHERE id = ?",
                        (_json.dumps(merged, ensure_ascii=False), payment_id),
                    )
                    await _db.commit()
        else:
            # –ø—Ä—è–º–æ–π –∞–ø–¥–µ–π—Ç
            async with aiosqlite.connect(DB_FILE) as _db:
                merged = {**extra, "label": label}
                await _db.execute(
                    "UPDATE payments SET extra = ? WHERE id = ?",
                    (_json.dumps(merged, ensure_ascii=False), payment_id),
                )
                await _db.commit()

        pay_url = build_quickpay_url(
            receiver=YOOMONEY_WALLET_ID,
            amount=amount,
            label=label,
            name=name,
            desc=desc,
            success_url=YOOMONEY_RETURN_URL or "https://yoomoney.ru",
            payment_type=None,  # –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç (–∫–∞—Ä—Ç–∞/–ÆMoney)
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å (–ÆMoney)", url=pay_url)],
                [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"pm_yoomoney_check_{payment_id}")],
            ]
        )

        await callback.message.answer(
            f"üßæ <b>{name}</b>\n{desc}\n\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount:.2f} ‚ÇΩ</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ –∑–∞—Ç–µ–º ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.",
            reply_markup=kb
        )
        await callback.answer()

    # –ù—É–∂–µ–Ω –∏–º–ø–æ—Ä—Ç aiosqlite –≤–Ω—É—Ç—Ä—å —Ñ–∞–π–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—à–µ –¥–ª—è –∞–ø–¥–µ–π—Ç–∞ extra)
    import aiosqlite

    @yoomoney_router.callback_query(F.data.startswith("pm_yoomoney_check_"))
    async def check_payment(callback: CallbackQuery):
        payment_id = int(callback.data.rsplit("_", 1)[-1])
        row = await db.get_payment_by_id(payment_id)
        if not row:
            await callback.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        _pid, user_id, amount, status, purpose, extra_json, created_at = row
        if status == "approved":
            await callback.answer("–£–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ ‚úÖ", show_alert=True)
            return
        if status == "rejected":
            await callback.answer("–ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω.", show_alert=True)
            return

        try:
            extra = json.loads(extra_json or "{}")
        except Exception:
            extra = {}
        label = extra.get("label")
        if not label:
            await callback.answer("–ù–µ—Ç –º–µ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (label). –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
            return

        ok = await _yoomoney_find_paid(label, float(amount))
        if not ok:
            await callback.answer("–ü–ª–∞—Ç—ë–∂ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤ –ë–î –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await db.update_payment_status(payment_id, "approved")
        await _on_payment_approved(callback.message, payment_id)
        await callback.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
