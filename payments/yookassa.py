# payments/yookassa.py
from __future__ import annotations

import uuid
import json
import datetime
import html

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message,
)

from yookassa import Configuration, Payment

import db
from config import (
    YOOKASSA_ENABLED,
    YOOKASSA_SHOP_ID,
    YOOKASSA_SECRET_KEY,
    YOOKASSA_RETURN_URL,  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://t.me/<your_bot>
)

from marzban_api import (
    create_paid_user,            # create_paid_user(username: str, months: int) -> bool
    extend_user,                 # extend_user(username: str, months: int) -> bool | None
    get_user_subscription_link,  # get_user_subscription_link(username: str) -> str | None
)


# –†–æ—É—Ç–µ—Ä –ÆKassa (–ø–æ–¥–∫–ª—é—á–∏ –µ–≥–æ –≤ main.py: dp.include_router(yookassa_router))
yookassa_router = Router(name="yookassa")

# –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ ‚Äî —Ö–µ–Ω–¥–ª–µ—Ä—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
if YOOKASSA_ENABLED:
    Configuration.account_id = str(YOOKASSA_SHOP_ID or "").strip()
    Configuration.secret_key = str(YOOKASSA_SECRET_KEY or "").strip()


# ==========================
#        –£–¢–ò–õ–ò–¢–´
# ==========================

async def _merge_payment_extra(payment_id: int, patch: dict) -> None:
    """
    –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –≤–æ–ª—å—ë–º patch –≤ JSON payments.extra (–Ω–µ –∑–∞—Ç–∏—Ä–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ).
    """
    import aiosqlite
    from config import DB_FILE

    async with aiosqlite.connect(DB_FILE) as _db:
        cur = await _db.execute("SELECT extra FROM payments WHERE id = ?", (payment_id,))
        row = await cur.fetchone()
        base = {}
        if row and row[0]:
            try:
                base = json.loads(row[0])
            except Exception:
                base = {}
        base.update(patch)
        await _db.execute(
            "UPDATE payments SET extra = ? WHERE id = ?",
            (json.dumps(base, ensure_ascii=False), payment_id),
        )
        await _db.commit()


def _unpack_payment_row(row: tuple):
    """
    –°–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ë–î:
    - –ù–æ–≤–∞—è —Å—Ö–µ–º–∞: (id, user_id, amount, method, status, photo_id, extra, created_at) -> len == 8
    - –°—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞: (id, user_id, amount, status, purpose, extra, created_at) -> len == 7
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä:
      pid, user_id, amount, method, status, photo_id, purpose, extra_json, created_at
    """
    if row is None:
        return None

    if len(row) == 8:
        # –ù–æ–≤–∞—è —Å—Ö–µ–º–∞
        pid, user_id, amount, method, status, photo_id, extra_json, created_at = row
        purpose = None
        return pid, user_id, amount, method, status, photo_id, purpose, extra_json, created_at

    if len(row) == 7:
        # –°—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞
        pid, user_id, amount, status, purpose, extra_json, created_at = row
        method = None
        photo_id = None
        return pid, user_id, amount, method, status, photo_id, purpose, extra_json, created_at

    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    return None


async def _on_payment_approved(message: Message, payment_id: int) -> None:
    """
    –ü–æ–∑–≤–∞—Ç—å, –∫–æ–≥–¥–∞ –ø–ª–∞—Ç—ë–∂ –≤ –ÆKassa = succeeded:
    - new: —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É
    - renew: –ø—Ä–æ–¥–ª–∏—Ç—å username –Ω–∞ months
    - key: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á
    """
    row = await db.get_payment_by_id(payment_id)
    up = _unpack_payment_row(row)
    if not up:
        await message.answer("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return

    pid, user_id, amount, method, status, photo_id, purpose, extra_json, created_at = up

    # ptype/–ø—Ä–æ—á–µ–µ –±–µ—Ä—ë–º –∏–∑ extra (source of truth)
    meta = {}
    try:
        meta = json.loads(extra_json) if extra_json else {}
    except Exception:
        meta = {}

    ptype = (purpose or meta.get("ptype") or "new").strip().lower()    # new | renew | key
    months = int(meta.get("months", 1))
    username = meta.get("username")  # –¥–ª—è renew
    product_name = meta.get("product_name") or "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"

    if ptype == "renew":
        if not username:
            await message.answer("‚ö† –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ username –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return
        ok = await extend_user(username, months)
        link = await get_user_subscription_link(username) or ""
        if ok is False:
            await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return

        text = f"‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\n–ü–æ–¥–ø–∏—Å–∫–∞ <b>{username}</b> –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {months} –º–µ—Å."
        if link:
            text += f"\nüîó –°—Å—ã–ª–∫–∞: {link}"
        await message.answer(text)
        return

    if ptype == "key":
        code = await db.generate_key(months=months, uses_left=1)
        await message.answer(
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
            f"üîë –í–∞—à –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á: <code>{code}</code>\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥."
        )
        return

        # new ‚Äî —Å–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫—É
    new_username = f"paid_{user_id}_{payment_id}"

    # –°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π marzban_api.create_paid_user:
    created_ok = False
    try:
        # –Ω–æ–≤–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: (username, months)
        created_ok = await create_paid_user(new_username, months)
    except TypeError:
        try:
            # –≤–∞—Ä–∏–∞–Ω—Ç —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
            created_ok = await create_paid_user(username=new_username, months=months)
        except TypeError:
            try:
                # –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: (user_id, sub_number, months)
                created_ok = await create_paid_user(user_id, payment_id, months)
            except Exception:
                created_ok = False

    if not created_ok:
        await message.answer("‚ö† –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ —É–¥–∞–ª–æ—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è (—á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –≤ ¬´–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏¬ª)
    try:
        if hasattr(db, "set_local_name"):
            await db.set_local_name(user_id, new_username, new_username)
    except Exception:
        pass

    async def _on_payment_approved(message, payment_id: int, new_username: str, months: int):
        link = await get_user_subscription_link(new_username) or ""
        safe_username = html.escape(new_username)

        text = (
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: <code>{safe_username}</code>\n"
            f"‚è≥ –°—Ä–æ–∫: {months} –º–µ—Å."
        )

        if link:
            text += f"\nüîó –°—Å—ã–ª–∫–∞: {html.escape(link)}"

        await message.answer(text)

# ==========================
#        –•–ï–ù–î–õ–ï–†–´
# ==========================

@yookassa_router.callback_query(F.data == "pm_yookassa")
async def yk_create_payment(callback: CallbackQuery, state: FSMContext):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa –∏ –≤—ã–¥–∞—á–∞ –∫–Ω–æ–ø–∫–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª.
    –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –¥–æ —ç—Ç–æ–≥–æ –≤ state –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã:
      - amount: float
      - months: int
      - ptype: "new" | "renew" | "key"
      - renew_username: Optional[str]
      - product_name: Optional[str]
      - product_desc: Optional[str]
    """
    if not YOOKASSA_ENABLED or not (YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY):
        await callback.message.answer("–ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await callback.answer()
        return

    data = await state.get_data()
    amount = float(data.get("amount", 0.0))
    months = int(data.get("months", 1))
    ptype = (data.get("ptype") or "new").strip().lower()
    renew_username = data.get("renew_username")

    product_name = data.get("product_name") or f"–ü–æ–¥–ø–∏—Å–∫–∞ VPN ‚Äî {months} –º–µ—Å."
    product_desc = data.get("product_desc") or (
        "–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞.\n"
        "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫, –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏—è–º, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫."
    )

    # 1) —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –≤ –Ω–∞—à–µ–π –ë–î (pending)
    extra = {
        "ptype": ptype,
        "months": months,
        "username": renew_username,
        "product_name": product_name,
        "product_desc": product_desc,
        "via": "yookassa",
        "started_at": datetime.datetime.utcnow().isoformat(),
    }
    extra_json = json.dumps(extra, ensure_ascii=False)

    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ db.add_payment
    try:
        payment_id = await db.add_payment(
            user_id=callback.from_user.id,
            amount=amount,
            method="yookassa",
            status="pending",
            photo_id=None,
            extra=extra_json,
        )
    except TypeError:
        # —Å—Ç–∞—Ä–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: (user_id, period_id, key_code, amount, photo_id, extra)
        payment_id = await db.add_payment(
            callback.from_user.id,
            None,
            None,
            amount,
            None,
            extra_json,
        )

    # 2) —Å–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ –≤ YooKassa
    description = f"{product_name} (tg:{callback.from_user.id}, pid:{payment_id})"
    yo_payment = Payment.create({
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": YOOKASSA_RETURN_URL or "https://t.me",
        },
        "capture": True,
        "description": description,
        # "metadata": {"tg_id": str(callback.from_user.id), "local_pid": str(payment_id)},
    }, uuid.uuid4())

    confirmation_url = yo_payment.confirmation.confirmation_url
    yk_payment_id = yo_payment.id

    # 3) —Å–æ—Ö—Ä–∞–Ω–∏–º id –ø–ª–∞—Ç–µ–∂–∞ YooKassa –≤ extra
    await _merge_payment_extra(payment_id, {"yk_payment_id": yk_payment_id})

    # 4) –≤—ã–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å (–ÆKassa)", url=confirmation_url)],
            [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"pm_yk_check_{payment_id}")],
        ]
    )
    await callback.message.answer(
        f"üßæ <b>{product_name}</b>\n{product_desc}\n\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount:.2f} ‚ÇΩ</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.",
        reply_markup=kb
    )
    await callback.answer()


@yookassa_router.callback_query(F.data.startswith("pm_yk_check_"))
async def yk_check_payment(callback: CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa –∏, –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –≤—ã–¥–∞—á–∞ —É—Å–ª—É–≥–∏.
    """
    try:
        payment_id = int(callback.data.rsplit("_", 1)[-1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–ª–∞—Ç—ë–∂.", show_alert=True)
        return

    row = await db.get_payment_by_id(payment_id)
    up = _unpack_payment_row(row)
    if not up:
        await callback.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    pid, user_id, amount, method, status, photo_id, purpose, extra_json, created_at = up

    if status == "approved":
        await callback.answer("–û–ø–ª–∞—Ç–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ", show_alert=True)
        return
    if status == "rejected":
        await callback.answer("–ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω.", show_alert=True)
        return

    # –¥–æ—Å—Ç–∞—ë–º –∏–∑ extra id –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa
    meta = {}
    try:
        meta = json.loads(extra_json) if extra_json else {}
    except Exception:
        meta = {}

    yk_payment_id = meta.get("yk_payment_id")
    if not yk_payment_id:
        await callback.answer("–ù–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–∞ YooKassa. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
        return

    yo_payment = Payment.find_one(yk_payment_id)
    yo_status = getattr(yo_payment, "status", None)

    if yo_status == "succeeded":
        # –ø–æ–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π
        try:
            await db.update_payment_status(payment_id, "approved")
        except AttributeError:
            # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –¥–æ–±–∞–≤–∏–ª —Ö–µ–ª–ø–µ—Ä ‚Äî —Å–¥–µ–ª–∞–µ–º –ø—Ä—è–º—ã–º –∞–ø–¥–µ–π—Ç–æ–º
            import aiosqlite
            from config import DB_FILE
            async with aiosqlite.connect(DB_FILE) as _db:
                await _db.execute("UPDATE payments SET status = ? WHERE id = ?", ("approved", payment_id))
                await _db.commit()

        # –≤—ã–¥–∞—ë–º —É—Å–ª—É–≥—É
        await _on_payment_approved(callback.message, payment_id)
        await callback.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
        return

    if yo_status in ("canceled", "expired"):
        try:
            await db.update_payment_status(payment_id, "rejected")
        except AttributeError:
            import aiosqlite
            from config import DB_FILE
            async with aiosqlite.connect(DB_FILE) as _db:
                await _db.execute("UPDATE payments SET status = ? WHERE id = ?", ("rejected", payment_id))
                await _db.commit()

        await callback.answer("–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω/–∏—Å—Ç—ë–∫.", show_alert=True)
        return

    # waiting_for_capture | pending –∏ —Ç.–ø.
    await callback.answer("–ü–ª–∞—Ç—ë–∂ –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
