from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove

from keyboards import reviews_menu, main_menu
from config import REVIEWS_CHAT_ID

review_router = Router()


class ReviewForm(StatesGroup):
    waiting_for_text = State()


# –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤
@review_router.message(F.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
async def show_reviews_menu(message: Message):
    await message.answer("üì¢ –ú–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤:", reply_markup=reviews_menu)


# –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –æ—Ç–∑—ã–≤—ã" (–ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª)
@review_router.message(F.text == "üìñ –í—Å–µ –æ—Ç–∑—ã–≤—ã")
async def all_reviews(message: Message):
    await message.answer("üìù –í—Å–µ –æ—Ç–∑—ã–≤—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å: @hakune_reviews")


# –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
@review_router.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def leave_review(message: Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≥–∏—Ñ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å.",
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(ReviewForm.waiting_for_text)


# –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞/–º–µ–¥–∏–∞ –æ—Ç–∑—ã–≤–∞
@review_router.message(ReviewForm.waiting_for_text)
async def process_review(message: Message, state: FSMContext):
    username = message.from_user.username or message.from_user.full_name

    header = f"üì¢ –û—Ç–∑—ã–≤ –æ—Ç @{username}:"

    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞
        if message.photo:
            await message.bot.send_photo(REVIEWS_CHAT_ID, message.photo[-1].file_id,
                                         caption=f"{header}\n{message.caption or ''}")
        elif message.video:
            await message.bot.send_video(REVIEWS_CHAT_ID, message.video.file_id,
                                         caption=f"{header}\n{message.caption or ''}")
        elif message.animation:
            await message.bot.send_animation(REVIEWS_CHAT_ID, message.animation.file_id,
                                             caption=f"{header}\n{message.caption or ''}")
        else:
            await message.bot.send_message(REVIEWS_CHAT_ID, f"{header}\n{message.text}")

        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=main_menu("client"))
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞: {e}", reply_markup=main_menu("client"))

    await state.clear()


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@review_router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu("client"))
